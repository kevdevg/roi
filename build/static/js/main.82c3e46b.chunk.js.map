{"version":3,"sources":["calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","inversionFb","setInversionFb","clics","setClics","prospectos","setProspectos","ventasSenuelo","setVentasSenuelo","ventasVip","setVentasVip","precioSenuelo","setPrecioSenuelo","precioVip","setPrecioVip","cpc","conversionCaptura","conversionSenuelo","conversionVip","ingresoInicial","roiCampana","useEffect","Row","Col","Form","Group","Label","Control","value","onChange","e","isNaN","parseInt","target","type","controlId","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82c3e46b.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {Col, Form, Row} from 'react-bootstrap'\r\n\r\nfunction Calculator() {\r\n    const [inversionFb, setInversionFb] = useState(0);\r\n    const [clics, setClics] = useState(0);\r\n    const [prospectos, setProspectos] = useState(0);\r\n    const [ventasSenuelo, setVentasSenuelo] = useState(0);\r\n    const [ventasVip, setVentasVip] = useState(0);\r\n    const [precioSenuelo, setPrecioSenuelo] = useState(0);\r\n    const [precioVip, setPrecioVip] = useState(0);\r\n    const [cpc, setCpc] = useState(0);\r\n    const [conversionCaptura, setConversionCaptura] = useState(0);\r\n    const [conversionSenuelo, setConversionSenuelo] = useState(0);\r\n    const [conversionVip, setConversionVip] = useState(0);\r\n    const [ingresoInicial, setIngresoInicial] = useState(0);\r\n    const [roiCampana, setRoiCampana] = useState(0);\r\n    useEffect(() => {\r\n        /*let cpc = inversionFb / clics;\r\n        let conversionCaptura = prospectos / clics;\r\n        let conversionSenuelo = ventasSenuelo / prospectos;\r\n        let conversionVip = ventasVip / prospectos;\r\n        let ingresoInicial = (ventasSenuelo * precioSenuelo) + (ventasVip * precioVip)\r\n        let roiCampana = (ingresoInicial - inversionFb) / inversionFb\r\n        if (!isNaN(roiCampana)) {\r\n            setCpc(cpc)\r\n            setConversionCaptura(conversionCaptura)\r\n            setConversionSenuelo(conversionSenuelo)\r\n            setConversionVip(conversionVip)\r\n            setIngresoInicial(ingresoInicial)\r\n            setRoiCampana(roiCampana)\r\n        }*/\r\n\r\n    }, [inversionFb, clics, prospectos, ventasSenuelo, ventasVip, precioSenuelo, precioVip]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Inversión FB</Form.Label>\r\n                            <Form.Control value={inversionFb}\r\n                                          onChange={e => setInversionFb(isNaN(parseInt(e.target.value)) ? \"\" : parseInt(e.target.value))}\r\n                                          type='number'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Clics</Form.Label>\r\n                            <Form.Control value={clics}\r\n                                          onChange={e => setClics(isNaN(parseInt(e.target.value)) ? \"\" : parseInt(e.target.value))}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Prospectos</Form.Label>\r\n                            <Form.Control value={prospectos}\r\n                                          onChange={e => setProspectos(isNaN(parseInt(e.target.value)) ? \"\" : parseInt(e.target.value))}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Ventas Señuelo</Form.Label>\r\n                            <Form.Control value={ventasSenuelo}\r\n                                          onChange={e => setVentasSenuelo(isNaN(parseInt(e.target.value)) ? \"\" : parseInt(e.target.value))}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Ventas VIP</Form.Label>\r\n                            <Form.Control value={ventasVip}\r\n                                          onChange={e => setVentasVip(isNaN(parseInt(e.target.value)) ? \"\" : parseInt(e.target.value))}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Precio Señuelo</Form.Label>\r\n                            <Form.Control value={precioSenuelo}\r\n                                          onChange={e => setPrecioSenuelo(isNaN(parseInt(e.target.value)) ? \"\" : parseInt(e.target.value))}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Precio VIP</Form.Label>\r\n                            <Form.Control value={precioVip}\r\n                                          onChange={e => setPrecioVip(isNaN(parseInt(e.target.value)) ? \"\" : parseInt(e.target.value))}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n                <Col>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>CPC</Form.Label>\r\n                            <Form.Control value={cpc}\r\n                                          type='number'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Conversión Pag Captura</Form.Label>\r\n                            <Form.Control value={conversionCaptura}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Conversión Señuelo</Form.Label>\r\n                            <Form.Control value={conversionSenuelo}\r\n                                          type='number'/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Conversión VIP</Form.Label>\r\n                            <Form.Control value={conversionVip}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Ingreso Inicial</Form.Label>\r\n                            <Form.Control value={ingresoInicial}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>ROI CAMPAÑA</Form.Label>\r\n                            <Form.Control value={roiCampana}/>\r\n                        </Form.Group>\r\n\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from \"./calculator\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Calculator/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}